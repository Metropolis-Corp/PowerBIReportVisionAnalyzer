import os
import base64
import mimetypes
import imghdr
import logging
from openai import AzureOpenAI
from openai.error import APIError, APIConnectionError, RateLimitError, AuthenticationError
from jsonschema import validate, ValidationError
from autogen.skill_base import Skill, SkillExecutionError

# Make sure to configure your Python path or environment correctly to find custom modules
# Assume that necessary configurations and API keys are correctly set in the environment variables
client = AzureOpenAI(
    api_version="2024-02-01",
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_key=os.getenv("AZURE_OPENAI_API_KEY")
)

class AnalyzeImageWithGPT4Vision(Skill):
    """
    A skill for analyzing images using GPT-4 Vision to extract insights, summaries, or specific data points.
    This skill takes an image file path and a question about the image as inputs and uses GPT-4 Vision to generate
    relevant answers or insights.
    """
    name = "AnalyzeImageWithGPT4Vision"
    description = "Analyzes images using GPT-4 Vision to extract insights, summaries, or specific data points."

    input_schema = {
        "type": "object",
        "properties": {
            "image_file": {
                "type": "string",
                "description": "Path to the image file to be analyzed."
            },
            "question": {
                "type": "string",
                "description": "Question to pose regarding the image."
            }
        },
        "required": ["image_file", "question"]
    }

    output_schema = {
        "type": "object",
        "properties": {
            "answer": {
                "type": "string",
                "description": "Answer generated by GPT-4 Vision based on the image and question."
            }
        },
        "required": ["answer"]
    }

    def execute(self, input_data):
        """
        Execute the skill with the given input data.
        Validates the input, processes the image and question, and returns the analysis results.
        """
        self.validate_input(input_data)
        image_file = input_data["image_file"]
        question = input_data["question"]

        if not os.path.isfile(image_file):
            raise SkillExecutionError(f"Image file does not exist: {image_file}")

        file_type, _ = mimetypes.guess_type(image_file)
        if file_type not in ["image/png", "image/jpeg"]:
            raise SkillExecutionError("Unsupported image format. Supported formats: PNG, JPEG.")

        detected_format = imghdr.what(image_file)
        if detected_format not in ["png", "jpeg"]:
            raise SkillExecutionError("Image content does not match the expected format.")

        image_data = self.encode_image(image_file)
        answer = self.ask_gpt4_vision(image_data, question)
        output_data = {"answer": answer}
        self.validate_output(output_data)
        return output_data

    def encode_image(self, image_path):
        """
        Encode the image file in base64 format to prepare it for analysis.
        """
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')

    def ask_gpt4_vision(self, image_data, question, max_tokens=250, temperature=0.5):
        """
        Interact with GPT-4 Vision API to analyze the encoded image and provide answers to the given question.
        """
        try:
            response = client.Completion.create(
                model="gpt-4-vision",
                prompt=question,
                attachments=[{"data": f"data:image/png;base64,{image_data}", "type": "image/png"}],
                max_tokens=max_tokens,
                temperature=temperature
            )
            if response.choices and response.choices[0].text:
                return response.choices[0].text.strip()
            else:
                raise SkillExecutionError("Unexpected response format from GPT-4 Vision API.")
        except RateLimitError as e:
            raise SkillExecutionError(f"Rate limit exceeded: {e}") from e
        except AuthenticationError as e:
            raise SkillExecutionError(f"Authentication error: {e}") from e
        except APIError as e:
            raise SkillExecutionError(f"API error: {e}") from e
        except APIConnectionError as e:
            raise SkillExecutionError(f"API connection error: {e}") from e

    def validate_input(self, input_data):
        """
        Validate the input data against the defined schema.
        """
        try:
            validate(instance=input_data, schema=self.input_schema)
        except ValidationError as e:
            raise SkillExecutionError(f"Invalid input data: {e}") from e

    def validate_output(self, output_data):
        """
        Validate the output data against the defined schema.
        """
        try:
            validate(instance=output_data, schema=self.output_schema)
        except ValidationError as e:
            raise SkillExecutionError(f"Invalid output data: {e}") from e

# Example usage
if __name__ == "__main__":
    skill_instance = AnalyzeImageWithGPT4Vision()
    input_example = {"image_file": "./sandbox/image.png", "question": "What does this image depict?"}
    try:
        result = skill_instance.execute(input_example)
        print(result)
    except SkillExecutionError as e:
        logging.error(f"Error executing skill: {e}")
